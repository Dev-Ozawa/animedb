#!/usr/bin/env python

from __future__ import print_function

import sys
import click

from yaml import load
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader

DEFAULT_DBFILE = 'animedb.yml'
DEFAULT_SORT_KEYS = ['started_year', 'started_month', 'started_day']

def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

def load_db(dbfile):
  return load(dbfile, Loader=Loader)

def format_date(year, month, day):
  return u'/'.join(map(unicode, filter(bool, [year, month, day])))

def sort_data(data, keys=DEFAULT_SORT_KEYS):
  return sorted(data, key = lambda datum: map(lambda k: datum[k], keys))

@click.group()
def cli():
  pass

@cli.command('list')
@click.option('--dbfile', default=DEFAULT_DBFILE, type=click.File('r'), help='Anime DB file to list.')
@click.option('--sort', default=None, type=str, help='Comma-separated list of sorting keys.')
def listdb(dbfile, sort):
  data = load_db(dbfile)

  if sort:
    data = sort_data(data, sort.split(','))

  for datum in data:
    print(u','.join([
      datum['id'],
      datum['medium'],
      format_date(datum['started_year'], datum['started_month'], datum['started_day']),
      format_date(datum['ended_year'], datum['ended_month'], datum['ended_day'])
    ]))

def test_uniqueness(data):
  dic = {}

  for datum in data:
    if not datum['id'] in dic:
      dic[datum['id']] = [datum]
    else:
      dic[datum['id']] += datum

  dups = filter(lambda l: len(l) > 1, dic.values())

  if not dups:
    return True

  return '\n'.join(['duplicated IDs found:'] + map(lambda d: d[0]['id'], dups))

@cli.command()
@click.option('--dbfile', default=DEFAULT_DBFILE, type=click.File('r'), help='Anime DB file to test.')
def test(dbfile):
  data = load_db(dbfile)
  testers = filter(lambda (k, v): k.startswith('test_'), list(globals().items()))
  errors = []

  for name, tester in testers:
    result = tester(data)

    if result is not True:
      errors.append('{0} failed: '.format(name) + result)

  if errors:
    for error in errors:
      eprint(error)
    sys.exit(1)

if __name__ == '__main__':
  cli()
