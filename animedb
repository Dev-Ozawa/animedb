#!/usr/bin/env python
 # -*- coding: utf-8 -*-

from __future__ import print_function

import sys
import re
import click
import json
import csv

from yaml import load
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader

import ruamel.yaml

from terminaltables import SingleTable

DEFAULT_DBFILE = 'animedb.yml'
DEFAULT_MADB_FILE = 'madb.json'
DEFAULT_MADB_OUTPUT_FILE = 'madb-converted.yml'
DEFAULT_SORT_KEYS = ['started_year', 'started_month', 'started_day']
DEFAULT_MERGE_KEY = 'madb_id'
DEFAULT_LIST_FORMAT = 'default'

MEDIA = [
  u'TV',
  u'OVA',
  u'劇場',
  u'TVスペシャル',
  u'その他',
  u'イベント',
  u'個人制作',
  u'不明',
  u'該当なし'
]

CSV_FIELDNAMES = [
  u'madb_id',
  u'medium',
  u'duplicated',
  u'id',
  u'title',
  u'suffix',
  u'ruby',
  u'started_year',
  u'started_month',
  u'started_day',
  u'ended_year',
  u'ended_month',
  u'ended_day',
  u'broadcast',
  u'author',
  u'original_title',
  u'madb_uri',
  u'official_uri',
  u'memo'
]

def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

def load_db(dbfile):
  return load(dbfile, Loader=Loader)

def load_db_roundtrip(dbfile):
  return ruamel.yaml.load(dbfile, ruamel.yaml.RoundTripLoader)

# Load JSON MADB data output by:
#   https://github.com/builtinnya/mediaarts-db-crawler
def load_madb(dbfile):
  return json.load(dbfile)

def dump_db_roundtrip(data, outfile):
  ruamel.yaml.dump(data, outfile, Dumper=ruamel.yaml.RoundTripDumper, allow_unicode=True)

def format_date(year, month, day):
  return u'/'.join(map(unicode, filter(bool, [year, month, day])))

def format_percentage(percentage):
  return '{0:.2%}'.format(percentage)

def sort_data(data, keys=DEFAULT_SORT_KEYS):
  return sorted(data, key = lambda datum: map(lambda k: datum[k], keys))

def merge_data(data, source, key=DEFAULT_MERGE_KEY):
  for datum in data:
    if datum[key] in source:
      datum.update(source[datum[key]])

  return data

# Takes a list and returns a list which contains only truthy values in the given list.
def compact(l):
  return [v for v in l if v]

@click.group()
def cli():
  pass

@cli.command('madb')
@click.option('--dbfile', default=DEFAULT_MADB_FILE, type=click.File('r'), help='MADB JSON data from crawler.')
@click.option('--outputfile', default=DEFAULT_MADB_OUTPUT_FILE, type=click.File('w'), help='Output file name.')
def madb(dbfile, outputfile):
  # Takes an episode and pre-parsed times and returns the start and end time of
  # the given episode.
  def parse_time(episode, times):
    episode_seq = re.search(ur'\d+', episode.get(u'各話表記', u''))

    if not times or not episode_seq:
      return None, None

    episode_seq = int(episode_seq.group(0))

    for first, last, start_h, start_m, end_h, end_m in times:
      if int(first) <= episode_seq and episode_seq <= int(last):
        return u':'.join([start_h, start_m]), u':'.join([end_h, end_m])

    return None, None

  data = load_madb(dbfile)
  times_re = re.compile(ur'（(\d+)(?:話|回)～(\d+)(?:話|回)）.*?(\d{1,2})時(\d{1,2})分～(\d{1,2})時(\d{1,2})分')
  result = {}

  for datum in data:
    if datum.get(u'アニメシリーズID') and datum.get(u'各話情報'):
      times_raw = datum.get(u'放送期間など', u'')
      times = times_re.findall(times_raw)
      episodes = []

      for episode in datum[u'各話情報']:
        prefix = episode.get(u'各話表記')
        title = episode.get(u'各話タイトル')
        literal_title = ' '.join(compact([prefix, title]))

        start_time, end_time = parse_time(episode, times)
        started_at = ' '.join(compact([episode.get(u'公開日'), start_time]))
        ended_at = ' '.join(compact([episode.get(u'公開日'), end_time]))

        episodes.append({
          'prefix': prefix,
          'title': title,
          'literal_title': literal_title,
          'started_at': started_at,
          'ended_at': ended_at,
          'ruby': ''
        })

      result[datum[u'アニメシリーズID']] = { 'episodes': episodes }

  dump_db_roundtrip(result, outputfile)

@cli.command('merge')
@click.option('--dbfile', default=DEFAULT_DBFILE, type=click.File('r'), help='Anime DB file to merge in.')
@click.option('--key', default=DEFAULT_MERGE_KEY, type=str, help='Merge key.')
@click.argument('sourcefile', type=click.File('r'))
@click.argument('outputfile', type=click.File('w'))
def merge(dbfile, key, sourcefile, outputfile):
  data = load_db_roundtrip(dbfile)
  source = load_db_roundtrip(sourcefile)

  dump_db_roundtrip(merge_data(data, source, key), outputfile)

@cli.command('stats')
@click.option('--dbfile', default=DEFAULT_DBFILE, type=click.File('r'), help='Anime DB file to show statistics.')
def stats(dbfile):
  data = load_db(dbfile)
  count = {}

  for medium in MEDIA:
    count[medium] = 0

  for datum in data:
    if not datum['medium'] in MEDIA:
      count[u'該当なし'] += 1
    else:
      count[datum['medium']] += 1

  total_count = len(data)
  table_rows = [['Medium', 'Count', 'Percent [%]']]

  for medium in MEDIA:
    table_rows.append([medium, count[medium], format_percentage(count[medium] * 1.0 / total_count)])

  table_rows.append(['Total', total_count, format_percentage(1)])

  table = SingleTable(table_rows)
  table.inner_footing_row_border = True

  print(table.table)

def listdb_default(data):
  for datum in data:
    print(u','.join([
      datum['id'],
      datum['medium'],
      format_date(datum['started_year'], datum['started_month'], datum['started_day']),
      format_date(datum['ended_year'], datum['ended_month'], datum['ended_day'])
    ]))

def listdb_google_ime(data):
  emitted_entry = {}

  for datum in data:
    if datum['ruby'] and datum['title']:
      ruby = re.sub(ur'[ ]', '', datum['ruby'])
      title = datum['title']
      entry = u'\t'.join([ruby, title, u'固有名詞'])

      if entry not in emitted_entry:
        print(entry)
        emitted_entry[entry] = True

def listdb_csv(data):
  writer = csv.DictWriter(sys.stdout, fieldnames=CSV_FIELDNAMES)

  writer.writeheader()

  for datum in data:
    for key, val in list(datum.items()):
      if isinstance(val, unicode):
        val = val.encode('utf-8')
      datum[key] = val

    writer.writerow({ key: datum[key] for key in CSV_FIELDNAMES })

@cli.command('list')
@click.option('--dbfile', default=DEFAULT_DBFILE, type=click.File('r'), help='Anime DB file to list.')
@click.option('--sort', default=None, type=str, help='Comma-separated list of sorting keys.')
@click.option('--format', default=DEFAULT_LIST_FORMAT, type=str, help='A string to specify list format.')
def listdb(dbfile, sort, format):
  lister = globals().get('listdb_{0}'.format(format), None)

  if not lister:
    eprint('unknown list format: ', format)
    sys.exit(1)

  data = load_db(dbfile)

  if sort:
    data = sort_data(data, sort.split(','))

  lister(data)

def test_uniqueness(data):
  dic = {}

  for datum in data:
    if not datum['id'] in dic:
      dic[datum['id']] = [datum]
    else:
      dic[datum['id']] += datum

  dups = filter(lambda l: len(l) > 1, dic.values())

  if not dups:
    return True

  return '\n'.join(['duplicated IDs found:'] + map(lambda d: d[0]['id'], dups))

def test_ruby(data):
  def anime_str(datum):
    return (datum['madb_id'] or '') + ':' + (datum['ruby'] or '') + ':' + (datum['title'] or '')

  def is_error(datum):
    return (re.search(ur'[^ァ-ヴー ]', datum['ruby']) or
            re.search(ur'[ ]{2,}', datum['ruby']) or
            re.search(ur'[ー]{2,}', datum['ruby']) or
            re.search(ur'^[ ]+', datum['ruby']) or
            re.search(ur'[ ]+$', datum['ruby']) or
            re.search(ur'^[ー]+', datum['ruby']))

  errors = []

  for datum in data:
    if (not datum['ruby']) or is_error(datum):
      errors.append(anime_str(datum))

  if not errors:
    return True

  return '\n'.join(['{0} invalid rubies found:'.format(len(errors))] + errors)

@cli.command()
@click.option('--dbfile', default=DEFAULT_DBFILE, type=click.File('r'), help='Anime DB file to test.')
def test(dbfile):
  data = load_db(dbfile)
  testers = filter(lambda (k, v): k.startswith('test_'), list(globals().items()))
  errors = []

  for name, tester in testers:
    result = tester(data)

    if result is not True:
      errors.append('{0} failed: '.format(name) + result)

  if errors:
    for error in errors:
      eprint(error)
    sys.exit(1)

if __name__ == '__main__':
  cli()
